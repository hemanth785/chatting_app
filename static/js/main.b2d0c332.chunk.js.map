{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api_base_url","process","MainContainer","handleSelectedUser","selecte_user","setState","user","recipentList","state","userData","filter","_id","showSelectUser","showSelectRecipeint","handleSelectedRecipient","recipient","console","log","showChatBox","Axios","get","then","response","data","users","this","onSelectUser","onSelectRecipient","sender","React","Component","ChatBoxComp","props","handleInputChange","e","inputMessage","target","value","handleSendMessage","postObject","user_id","recipient_id","message","post","newMessage","status","prevState","conversation","user1_id","user2_id","conversations","checkForMessages","setInterval","className","name","map","item","index","key","type","onChange","placeholder","id","onClick","SelectUserComp","userid","SelectRecipientComp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b2d0c332.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Axios from 'axios';\n\n\nconst api_base_url = process.env.REACT_APP_API_BASE_URL;\nclass MainContainer extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            userData : [],\n            recipentList : [],\n            user : {},\n            recipient : {},\n            showSelectUser : true,\n            showSelectRecipeint : false,\n            showChatBox : false\n        }\n    }\n    handleSelectedUser = (selecte_user) => {\n        this.setState({user : selecte_user,\n            recipentList: this.state.userData.filter((user) => {\n                return selecte_user._id !== user._id;\n            }),\n            showSelectUser: false,\n            showSelectRecipeint: true\n        });\n    }\n    handleSelectedRecipient = (recipient) => {\n        console.log(\"hello123\")\n        this.setState({recipient : recipient,\n            showSelectRecipeint: false,\n            showChatBox: true\n        });\n    }\n    componentWillMount(){\n        Axios.get(`${api_base_url}api/users`)\n             .then((response)=>{\n                 var userData = response.data.users;\n                 \n                 this.setState({userData: userData,recipentList:userData});\n            });\n    }\n    render() {\n        return (\n            <div>\n                {this.state.showSelectUser && <SelectUserComp onSelectUser={this.handleSelectedUser} userData={this.state.userData}/>}\n\n                {this.state.showSelectRecipeint && <SelectRecipientComp onSelectRecipient={this.handleSelectedRecipient} userData={this.state.recipentList}/>}\n\n                {this.state.showChatBox && <ChatBoxComp user={this.state.user} recipient={this.state.recipient} sender={this.state.recipient}/>}\n            </div>\n        );\n    }\n}\n\nclass ChatBoxComp extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            conversation: [],\n            user_id: this.props.user._id,\n            recipient_id: this.props.recipient._id,\n            inputMessage: \"\"\n        }\n    }\n    componentWillMount(){\n        const postObject={\n            user1_id : this.state.user_id,\n            user2_id : this.state.recipient_id\n            }\n            Axios.post(`${api_base_url}api/conversation/getConverstions`, postObject)\n            .then(response=>{ \n                this.setState({\n                conversation: response.data.conversations\n                })\n            });\n\n        this.checkForMessages()\n    }\n\n    checkForMessages(){\n        console.log(\"called\")\n        setInterval(() => {\n            const postObject={\n                user1_id : this.state.user_id,\n                user2_id : this.state.recipient_id\n             }\n             Axios.post(`${api_base_url}api/conversation/getConverstions`, postObject)\n             .then(response=>{ \n                 this.setState({\n                    conversation: response.data.conversations\n                 })\n             });\n        }, 2000);\n    }\n    \n    handleInputChange = (e) => {\n        this.setState({inputMessage: e.target.value});\n    }\n    handleSendMessage = () => {\n        let inputMessage = this.state.inputMessage;\n        if(inputMessage){\n            const postObject={\n                sender : this.state.user_id,\n                recipient : this.state.recipient_id,\n                message : inputMessage\n            }\n\n            Axios.post(`${api_base_url}api/conversation`, postObject)\n            .then(response=>{ \n                let newMessage = response.data.message;\n                if(response.status === 201){\n                    this.setState(prevState =>({\n                        conversation: [...prevState.conversation, newMessage],\n                        inputMessage: \"\"\n                    }))\n                }\n            });\n        }\n    }\n    render(){\n        return (\n            <div className=\"chatboxContainer\">\n                <header>{this.props.recipient.name}</header> \n                <div className=\"conversation\">\n                        {this.state.conversation.map((item, index) => {\n                            if(item.sender === this.state.user_id){\n                                return <div className=\"text-bubble userMessage\" key={item._id}>{item.message}</div>\n                            } else {\n                                return <div className=\"text-bubble recipientMessage\" key={item._id}>{item.message}</div>\n                            }\n                        })}\n                </div>\n                <div className=\"typeMessage\">\n                    <input type=\"text\" value={this.state.inputMessage} onChange={this.handleInputChange} placeholder=\"Type here\" id=\"textMessage\"></input>\n                    <button id=\"sendMessage\" onClick={this.handleSendMessage} className=\"sendMessage\">send</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass SelectUserComp extends React.Component {\n    constructor(props){\n        super(props);\n    }\n    handleSelectedUser = (user) => {\n        this.props.onSelectUser(user);\n    }\n    render(){\n        return (\n            <div>\n                <div className=\"userSelectDiv\">\n                    <header className=\"subheader\">select user account</header>\n                    {this.props.userData.map((item, index) => {\n                        return <div className=\"userCard\" userid={item._id} onClick={() => {this.handleSelectedUser(item)}} key={index}>{item.name}</div>\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass SelectRecipientComp extends React.Component {\n    constructor(props){\n        super(props);\n    }\n    handleSelectedRecipient = (user) => {\n        this.props.onSelectRecipient(user);\n    }\n    render(){\n        return (\n            <div>\n                <div className=\"recipientSelectDiv\">\n                    <header className=\"subheader\">Send message to:</header>\n                    {this.props.userData.map((item, index) => {\n                        return <div className=\"userCard\" userid={item._id} onClick={() => {this.handleSelectedRecipient(item)}} key={index}>{item.name}</div>\n                    })}\n                </div>\n            </div>\n            )\n    }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"main-container\">\n            <header className=\"text-center\">Chat app</header>\n            <MainContainer />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}